Public Sub LookupData()
On Error GoTo ErrorSub

Dim Server1_Name As String
Dim Server2_Name As String
Dim PrimeCutDatabase As String
Dim GSSDatabase As String
Dim PrimeCutUser As String
Dim GSSUser As String
Dim PrimeCutPWD As String
Dim GSSPWD As String
Dim PrimeCutSQLStr As String
Dim PrimeCutClient As String
Dim GSSSQLStr As String
Dim strPCPart As String
Dim dblPCThick As Double
Dim varPCCost As Variant
Dim strGSPCPart As String
Dim dblGSThick As Double
Dim Cn1 As Object
Dim Cn2 As Object
Dim rs1 As Object
Dim rs2 As Object

Dim strCn1 As String
Dim strCn2 As String

Dim retStr As String
Dim retRange As Range

Dim i As Integer

Dim canConnect As Boolean

Dim s As String
Dim n As Integer

' Text file used for testing output
'n = FreeFile()
'Open "C:\Users\Glen.Leonard\Documents\test.txt" For Output As #n


Set rs1 = CreateObject("ADODB.Recordset")
Set rs2 = CreateObject("ADODB.Recordset")

' Connection Values for PrimeCut Database
PrimeCutDatabase = "RSW-DC01:F:/PC4/Primecut4.fdb"
PrimeCutClient = "\\RSW-DC01\Technical\PC4\Primecut4\Win32\fbclient.dll"
PrimeCutUser = "EXTERNALREPORTING"
PrimeCutPWD = "global"

' Connection Values for GlobalShop Database
Server2_Name = "RSW-ERP01"
GSSDatabase = "GLOBALRSL"
GSSUser = "EXTERNALREPORTING"
GSSPWD = "global"


' Connection string for connecting to PrimeCut SQL Server database
strCn1 = "Driver=Firebird/InterBase(r) driver;Uid=" & PrimeCutUser & ";Pwd=" & PrimeCutPWD & _
";DBNAME=" & PrimeCutDatabase & ";CLIENT=" & PrimeCutClient & ";ROLE=EXTERNAL_READ;"

' Connection string for connecting to GlobalShop Pervasive SQL database
strCn2 = "Driver={Pervasive ODBC Client Interface};ServerName=" & Server2_Name & ";DBQ=" & GSSDatabase & _
";UID=" & GSSUser & ";PWD=" & GSSPWD & ";"

' SQL Query against Plate Costs View in GlobalShop
GSSSQLStr = "SELECT * FROM V_RS_PLATECOSTS"

' SQL Query against Plate Costs in PrimeCut. For the thickness the query trims the trailing zeroes and even the decimal point
PrimeCutSQLStr = "SELECT M.NAME, TRIM(TRAILING '.' FROM (TRIM(TRAILING '0' FROM MT.THICKNESS))) AS THICKNESS, MT.COSTPERKG FROM TBLMATERIALTHICKNESS MT JOIN TBLMATERIAL M ON MT.MATID = M.MATID ORDER BY M.NAME, MT.THICKNESS"


' Set and open the ADODB connections
Set Cn1 = CreateObject("ADODB.Connection")
Set Cn2 = CreateObject("ADODB.Connection")

Cn1.Open strCn1
Cn2.Open strCn2

rs1.Open PrimeCutSQLStr, Cn1, adOpenStatic

rs2.Open GSSSQLStr, Cn2, adOpenStatic

' Loop Counter is set to 6 so that inputting starts at row 6
i = 6

' Clear the sheet before processing
Worksheets("PLATES").Range("A6:N1000").ClearContents

' Shortcircuit for Loop ....
ReStartLoop:

'Loop through the records returned from GlobalShop
Do While Not rs2.EOF
     
     strGSPCPart = Trim(rs2![DESCRIPTION_3]) ' PrimeCut part number in GlobalShop
     dblGSThick = rs2![Thickness]
          
     rs1.MoveFirst
          
     'Loop through the PrimeCut records
     Do While Not rs1.EOF
                 
         strPCPart = Trim(rs1![Name])
         dblPCThick = rs1![Thickness]
         
             ' Find a matching name and thickness in the PrimeCut records
             If (strGSPCPart = strPCPart) And (dblGSThick = dblPCThick) Then
                 ' Get the cost from PrimeCut
                 varPCCost = rs1![COSTPERKG]
                 ' Used for testing, print to file
                 's = varPCCost
                 'Print #n, s
                                
                 Exit Do
             End If
         
         rs1.MoveNext
         ' If we got to the last record in Primecut without a match return a blank and zero cost
         If rs1.EOF Then
             strPCPart = ""
             varPCCost = 0
         End If
         
         
     Loop
     
     Worksheets("PLATES").Cells(i, 2).Value = rs2![PART]
     Worksheets("PLATES").Cells(i, 3).Value = rs2![Location]
     Worksheets("PLATES").Cells(i, 4).Value = rs2![Product_Line]
     Worksheets("PLATES").Cells(i, 5).Value = rs2![Description]
     Worksheets("PLATES").Cells(i, 6).Value = rs2![QTY_ONHAND]
     Worksheets("PLATES").Cells(i, 7).Value = rs2![UM_INVENTORY]
     Worksheets("PLATES").Cells(i, 8).Value = rs2![AMT_PRICE]
     Worksheets("PLATES").Cells(i, 9).Value = rs2![AMT_COST]
     Worksheets("PLATES").Cells(i, 10).Value = rs2![COST]
     Worksheets("PLATES").Cells(i, 11).Value = rs2![Thickness]
     Worksheets("PLATES").Cells(i, 12).Value = strPCPart
     Worksheets("PLATES").Cells(i, 13).Value = varPCCost
     Worksheets("PLATES").Cells(i, 14).Value = rs2![CODE_SORT]

    i = i + 1
    rs2.MoveNext
Loop
    
'===============================================================================================
ExitSub:
    
    If (rs1 Is Nothing) Then
       MsgBox "Recordset is closed and = Nothing"
    ElseIf (rs1.State And adStateOpen) = adStateOpen Then
       rs1.Close
       Set rs1 = Nothing
       Cn1.Close
       Set Cn1 = Nothing
    End If
       
    If (rs2 Is Nothing) Then
       MsgBox "Recordset is closed and = Nothing"
    ElseIf (rs2.State And adStateOpen) = adStateOpen Then
       rs2.Close
       Set rs2 = Nothing
       Cn2.Close
       Set Cn2 = Nothing
    End If
    
    'Close #n
    
    Exit Sub

ErrorSub:
    MsgBox Err.Number & " - " & Err.Description, vbCritical, "RUNTIME ERROR"
    Resume ExitSub

End Sub
Sub ClearSheet()
' Clear the sheet

Worksheets("PLATES").Range("A6:N1000").ClearContents

End Sub


Sub TestConnection()
Dim Cn As New ADODB.Connection
Dim strCon As String
Dim canConnect As Boolean

strCon = "Driver=Firebird/InterBase(r) driver;UID=EXTERNALREPORTING;PWD=global;DBNAME=RSW-DC01:F:/PC4/Primecut4.fdb;"

Cn.Open strCon

If Cn.State = adStateOpen Then
        canConnect = True
        Cn.Close
    End If

MsgBox canConnect


End Sub

